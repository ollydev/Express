//1090ms int64
//1030ms int32
//730ms (fpc trunk)

function main();
  var arr: TIntArray //imported decl
  var n: Int64 = 1000000;
  SetLength(arr, n)
  
  var seed: Int64 = 6239351;
  for(var i: Int64=0; i<n; i:=i+1) do
    seed := (1103515245 * seed + 12345);
    seed := seed % 1000000;
    arr[i] := seed
  end
  
  var before, after: Double;
  GetTickCount(before)
  
  // sort
  var gap: Int64 = 0;
  while(gap <= (n-1) div 3)
    gap := gap * 3 + 1;
  
  while(gap >= 1) do 
    for(var i: Int64 = gap; i < n; i:=i+1) do
      var j := i;
      
      while(gap < j and arr[j] < arr[j-gap]) do
        var tmp := arr[j];
        arr[j] := arr[j-gap];
        j := j - gap
        arr[j] := tmp
      end
    end
    gap := gap div 3;
  end

  
  GetTickCount(after)
  print after - before
end;

//1090ms int64
//1030ms int32
//730ms (fpc trunk)

var arr: TIntArray //imported decl

function main2();
  var n: Int64 = 1000000;
  SetLength(arr, n)
  
  
  var seed: Int64 = 6239351;
  for(var i: Int64=0; i<n; i:=i+1) do
    seed := (1103515245 * seed + 12345);
    seed := seed % 1000000;
    arr[i] := seed;
  end
  
  var before, after: Double;
  GetTickCount(before)
  
  // sort
  var len: Int64 = n
  var gap: Int64 = 0
  var i:   Int64 = 0
  var j:   Int64 = 0
  while(gap <= (len-1) div 3)
    gap := gap * 3 + 1;
  
  while(gap >= 1) do 
    for(i:=gap; i < len; i:=i+1) do
      j := i;
      
      while((gap < j) and (arr[j] < arr[j-gap])) do
        var tmp := arr[j];
        arr[j] := arr[j-gap];
        arr[j-gap] := tmp
        j := j - gap
      end
    end
    gap := gap / 3;
  end

  
  GetTickCount(after)
  print after - before
  
  for(i:=1; i < n; i := i + 1)
    if(arr[i-1] > arr[i])
      print arr[i]; 
end;  


main2();
    
    
    
    
    
    
    
